-- Inlines nested code blocks
-- $Id$
module InlineCodeblocks;

transform M : EMFTVM;

rule RetargetInvoke_cbLocalVariableStart {
	from lv : EMFTVM!LocalVariable (startInstruction =~ invoke_cb),
		invoke_cb : EMFTVM!Invoke_cb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ first),
		first : EMFTVM!Instruction
	to lv : EMFTVM!LocalVariable (startInstruction =~ first),
		invoke_cb : EMFTVM!Invoke_cb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ first),
		first : EMFTVM!Instruction
}

rule RetargetInvoke_cbLocalVariableEnd {
	from lv : EMFTVM!LocalVariable (endInstruction =~ invoke_cb),
		invoke_cb : EMFTVM!Invoke_cb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~| last),
		last : EMFTVM!Instruction
	to lv : EMFTVM!LocalVariable (endInstruction =~ last),
		invoke_cb : EMFTVM!Invoke_cb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ last),
		last : EMFTVM!Instruction
}

rule Invoke_cb {
	from cb : EMFTVM!CodeBlock (
			code =~ invoke_cb,
			maxStack =~ cb.maxStack,
			maxLocals =~ cb.maxLocals),
		invoke_cb : EMFTVM!Invoke_cb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock
	to cb : EMFTVM!CodeBlock (
		code =~ nestedCb.code before invoke_cb,
		localVariables =~ nestedCb.localVariables,
		lineNumbers =~ nestedCb.lineNumbers,
		nested =~ nestedCb.nested before nestedCb)
}

abstract rule Invoke_all_cbs {
	from cb : EMFTVM!CodeBlock (code =~ invoke_all_cbs),
		invoke_all_cbs : EMFTVM!Invoke_all_cbs
	to cb : EMFTVM!CodeBlock (code =~ invoke_all_cbs),
     invoke_all_cbs : EMFTVM!Invoke_all_cbs
}

rule Invoke_all_cbs_nested extends Invoke_all_cbs {
	from cb : EMFTVM!CodeBlock (
			code =~ invoke_all_cbs,
			nested =~ nestedCb),
		invoke_all_cbs : EMFTVM!Invoke_all_cbs,
		nestedCb : EMFTVM!CodeBlock
	to cb : EMFTVM!CodeBlock (
		code =~ invoke_all_cbs,
		code =~ nestedCb.code before invoke_all_cbs,
		localVariables =~ nestedCb.localVariables,
		lineNumbers =~ nestedCb.lineNumbers,
		nested =~ nestedCb.nested before nestedCb),
     invoke_all_cbs : EMFTVM!Invoke_all_cbs
}

rule Invoke_all_cbs_no_nested extends Invoke_all_cbs {
	from cb : EMFTVM!CodeBlock (
			code =~ invoke_all_cbs,
			maxStack =~ cb.maxStack,
			maxLocals =~ cb.maxLocals),
		invoke_all_cbs : EMFTVM!Invoke_all_cbs
	not cb : EMFTVM!CodeBlock (nested =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock
	to cb : EMFTVM!CodeBlock
}

rule EmptyLineNumber {
	from ln : EMFTVM!LineNumber
	not instr : EMFTVM!Instruction (lineNumber =~ ln)
}

abstract rule EmptyCodeBlock {
	from cb : EMFTVM!CodeBlock
	not instr : EMFTVM!Instruction (owningBlock =~ cb)
	to cb : EMFTVM!CodeBlock
}

rule EmptyCodeBlockWithLocals extends EmptyCodeBlock {
	from cb : EMFTVM!CodeBlock (localVariables =~ lv),
		lv : EMFTVM!LocalVariable
	to cb : EMFTVM!CodeBlock
}

rule EmptyCodeBlockWithLineNumbers extends EmptyCodeBlock {
	from cb : EMFTVM!CodeBlock (lineNumbers =~ ln),
		ln : EMFTVM!LineNumber
	to cb : EMFTVM!CodeBlock
}

rule EmptyCodeBlockWithoutAnything extends EmptyCodeBlock {
	from cb : EMFTVM!CodeBlock
}
