-- Inlines nested code blocks
-- $Id$
module InlineCodeblocks;

transform M : EMFTVM;

-- ======================================================================
-- Inline INVOKE_CB stage
-- ======================================================================

abstract rule LocalVariable {
	from lv : EMFTVM!LocalVariable
	to lv : EMFTVM!LocalVariable
}

rule RetargetInvoke_cbLocalVariableStart extends LocalVariable {
	from lv : EMFTVM!LocalVariable (startInstruction =~ invoke_cb),
		invoke_cb : EMFTVM!Invoke_cb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ first),
		first : EMFTVM!Instruction
	to lv : EMFTVM!LocalVariable (startInstruction =~ first),
		invoke_cb : EMFTVM!Invoke_cb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ first),
		first : EMFTVM!Instruction
}

rule RetargetInvoke_cbLocalVariableEnd extends LocalVariable {
	from lv : EMFTVM!LocalVariable (endInstruction =~ invoke_cb),
		invoke_cb : EMFTVM!Invoke_cb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~| last),
		last : EMFTVM!Instruction
	to lv : EMFTVM!LocalVariable (endInstruction =~ last),
		invoke_cb : EMFTVM!Invoke_cb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ last),
		last : EMFTVM!Instruction
}

abstract rule Invoke_cb {
	from cb : EMFTVM!CodeBlock (code =~ invoke_cb),
		invoke_cb : EMFTVM!Invoke_cb
	to cb : EMFTVM!CodeBlock (code =~ invoke_cb),
	   invoke_cb : EMFTVM!Invoke_cb
}

rule Invoke_cb_inline_locals extends Invoke_cb {
	from cb : EMFTVM!CodeBlock (code =~ invoke_cb),
		invoke_cb : EMFTVM!Invoke_cb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (localVariables =~ lv),
		lv : EMFTVM!LocalVariable (slot =~ lv.slot)
	to cb : EMFTVM!CodeBlock (
		code =~ invoke_cb,
		localVariables =~ lv),
	   invoke_cb : EMFTVM!Invoke_cb (codeBlock =~ nestedCb),
	   nestedCb : EMFTVM!CodeBlock,
	   lv : EMFTVM!LocalVariable
}

rule Invoke_cb_inline extends Invoke_cb {
	from cb : EMFTVM!CodeBlock (code =~ invoke_cb),
		invoke_cb : EMFTVM!Invoke_cb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock
	not nestedCb : EMFTVM!CodeBlock (localVariables =~ lv),
		lv : EMFTVM!LocalVariable
	to cb : EMFTVM!CodeBlock (
		code =~ invoke_cb,
		code =~ nestedCb.code before invoke_cb,
		lineNumbers =~ nestedCb.lineNumbers,
		nested =~ nestedCb.nested before nestedCb),
	   invoke_cb : EMFTVM!Invoke_cb
}

rule Invoke_cb_resetmax extends Invoke_cb {
	from cb : EMFTVM!CodeBlock (
			code =~ invoke_cb,
			maxLocals =~ cb.maxLocals,
			maxStack =~ cb.maxStack),
		invoke_cb : EMFTVM!Invoke_cb
	not invoke_cb : EMFTVM!Invoke_cb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock
	to cb : EMFTVM!CodeBlock
}

rule EmptyLineNumber {
	from ln : EMFTVM!LineNumber
	not instr : EMFTVM!Instruction (lineNumber =~ ln)
}

-- ======================================================================
-- Inline INVOKE_ALL_CBS stage
-- ======================================================================

rule RetargetInvoke_all_cbsLocalVariableStart extends LocalVariable {
	from lv : EMFTVM!LocalVariable (startInstruction =~ invoke_all_cbs),
		invoke_all_cbs : EMFTVM!Invoke_all_cbs (owningBlock =~ cb),
		cb : EMFTVM!CodeBlock (nested =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ first),
		first : EMFTVM!Instruction
	to lv : EMFTVM!LocalVariable (startInstruction =~ first),
		invoke_all_cbs : EMFTVM!Invoke_all_cbs (owningBlock =~ cb),
		cb : EMFTVM!CodeBlock (nested =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ first),
		first : EMFTVM!Instruction
}

rule RetargetInvoke_all_cbsLocalVariableEnd extends LocalVariable {
	from lv : EMFTVM!LocalVariable (endInstruction =~ invoke_all_cbs),
		invoke_all_cbs : EMFTVM!Invoke_all_cbs (owningBlock =~ cb),
		cb : EMFTVM!CodeBlock (nested =~| nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~| last),
		last : EMFTVM!Instruction
	to lv : EMFTVM!LocalVariable (endInstruction =~ last),
		invoke_all_cbs : EMFTVM!Invoke_all_cbs (owningBlock =~ cb),
		cb : EMFTVM!CodeBlock (nested =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ last),
		last : EMFTVM!Instruction
}

abstract rule Invoke_all_cbs {
	from cb : EMFTVM!CodeBlock (code =~ invoke_all_cbs),
		invoke_all_cbs : EMFTVM!Invoke_all_cbs
	to cb : EMFTVM!CodeBlock (code =~ invoke_all_cbs),
     invoke_all_cbs : EMFTVM!Invoke_all_cbs
}

rule Invoke_all_cbs_inline_locals extends Invoke_all_cbs {
	from cb : EMFTVM!CodeBlock (
			code =~ invoke_all_cbs,
			nested =~ nestedCb),
		invoke_all_cbs : EMFTVM!Invoke_all_cbs,
		nestedCb : EMFTVM!CodeBlock (localVariables =~ lv),
		lv : EMFTVM!LocalVariable (slot =~ lv.slot)
	to cb : EMFTVM!CodeBlock (
		code =~ invoke_all_cbs,
		nested =~ nestedCb,
		localVariables =~ lv),
       invoke_all_cbs : EMFTVM!Invoke_all_cbs,
       nestedCb : EMFTVM!CodeBlock,
	   lv : EMFTVM!LocalVariable
}

rule Invoke_all_cbs_inline extends Invoke_all_cbs {
	from cb : EMFTVM!CodeBlock (
			code =~ invoke_all_cbs,
			nested =~ nestedCb),
		invoke_all_cbs : EMFTVM!Invoke_all_cbs,
		nestedCb : EMFTVM!CodeBlock
	not nestedCb : EMFTVM!CodeBlock (localVariables =~ lv),
		lv : EMFTVM!LocalVariable (slot =~ lv.slot)
	to cb : EMFTVM!CodeBlock (
		code =~ invoke_all_cbs,
		code =~ nestedCb.code before invoke_all_cbs,
		lineNumbers =~ nestedCb.lineNumbers,
		nested =~ nestedCb.nested before nestedCb),
     invoke_all_cbs : EMFTVM!Invoke_all_cbs
}

rule Invoke_all_cbs_maxreset extends Invoke_all_cbs {
	from cb : EMFTVM!CodeBlock (
			code =~ invoke_all_cbs,
			maxStack =~ cb.maxStack,
			maxLocals =~ cb.maxLocals),
		invoke_all_cbs : EMFTVM!Invoke_all_cbs
	not cb : EMFTVM!CodeBlock (nested =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock
	to cb : EMFTVM!CodeBlock
}

abstract rule EmptyCodeBlock {
	from cb : EMFTVM!CodeBlock (applierFor =~ r),
		r : EMFTVM!Rule
	not cb : EMFTVM!CodeBlock (code =~ instr),
		instr : EMFTVM!Instruction
	to cb : EMFTVM!CodeBlock (applierFor =~ r),
		r : EMFTVM!Rule
}

rule EmptyCodeBlockWithLocals extends EmptyCodeBlock {
	from cb : EMFTVM!CodeBlock (localVariables =~ lv),
		lv : EMFTVM!LocalVariable
	to cb : EMFTVM!CodeBlock
}

rule EmptyCodeBlockWithLineNumbers extends EmptyCodeBlock {
	from cb : EMFTVM!CodeBlock (lineNumbers =~ ln),
		ln : EMFTVM!LineNumber
	to cb : EMFTVM!CodeBlock
}

rule EmptyCodeBlockWithoutAnything extends EmptyCodeBlock {
	from cb : EMFTVM!CodeBlock
}
