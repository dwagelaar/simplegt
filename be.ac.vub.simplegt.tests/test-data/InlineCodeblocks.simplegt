-- Inlines nested code blocks
-- $Id$
module InlineCodeblocks;

transform M : EMFTVM;

-- ======================================================================
-- Inline INVOKE_CB stage
-- ======================================================================

abstract rule LocalVariable {
	from lv : EMFTVM!LocalVariable
	to lv : EMFTVM!LocalVariable
}

rule RetargetInvokeCbLocalVariableStart extends LocalVariable {
	from lv : EMFTVM!LocalVariable (startInstruction =~ invokeCb),
		invokeCb : EMFTVM!InvokeCb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ first),
		first : EMFTVM!Instruction
	to lv : EMFTVM!LocalVariable (startInstruction =~ first),
		invokeCb : EMFTVM!InvokeCb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ first),
		first : EMFTVM!Instruction
}

rule RetargetInvokeCbLocalVariableEnd extends LocalVariable {
	from lv : EMFTVM!LocalVariable (endInstruction =~ invokeCb),
		invokeCb : EMFTVM!InvokeCb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~| last),
		last : EMFTVM!Instruction
	to lv : EMFTVM!LocalVariable (endInstruction =~ last),
		invokeCb : EMFTVM!InvokeCb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ last),
		last : EMFTVM!Instruction
}

abstract rule InvokeCb {
	from cb : EMFTVM!CodeBlock (code =~ invokeCb),
		invokeCb : EMFTVM!InvokeCb
	to cb : EMFTVM!CodeBlock (code =~ invokeCb),
	   invokeCb : EMFTVM!InvokeCb
}

rule InvokeCb_InlineLocals extends InvokeCb {
	from cb : EMFTVM!CodeBlock (code =~ invokeCb),
		invokeCb : EMFTVM!InvokeCb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (localVariables =~ lv),
		lv : EMFTVM!LocalVariable (slot =~ lv.slot)
	to cb : EMFTVM!CodeBlock (
		code =~ invokeCb,
		localVariables =~ lv),
	   invokeCb : EMFTVM!InvokeCb (codeBlock =~ nestedCb),
	   nestedCb : EMFTVM!CodeBlock,
	   lv : EMFTVM!LocalVariable
}

rule InvokeCb_Inline extends InvokeCb {
	from cb : EMFTVM!CodeBlock (code =~ invokeCb),
		invokeCb : EMFTVM!InvokeCb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock
	not nestedCb : EMFTVM!CodeBlock (localVariables =~ lv),
		lv : EMFTVM!LocalVariable
	to cb : EMFTVM!CodeBlock (
		code =~ invokeCb,
		code =~ nestedCb.code before invokeCb,
		lineNumbers =~ nestedCb.lineNumbers,
		nested =~ nestedCb.nested before nestedCb),
	   invokeCb : EMFTVM!InvokeCb
}

rule InvokeCb_ResetMax extends InvokeCb {
	from cb : EMFTVM!CodeBlock (
			code =~ invokeCb,
			maxLocals =~ cb.maxLocals,
			maxStack =~ cb.maxStack),
		invokeCb : EMFTVM!InvokeCb
	not invokeCb : EMFTVM!InvokeCb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock
	to cb : EMFTVM!CodeBlock
}

rule EmptyLineNumber {
	from ln : EMFTVM!LineNumber
	not instr : EMFTVM!Instruction (lineNumber =~ ln)
}

-- ======================================================================
-- Inline INVOKE_ALL_CBS stage
-- ======================================================================

rule RetargetInvokeAllCbsLocalVariableStart extends LocalVariable {
	from lv : EMFTVM!LocalVariable (startInstruction =~ invokeAllCbs),
		invokeAllCbs : EMFTVM!InvokeAllCbs (owningBlock =~ cb),
		cb : EMFTVM!CodeBlock (nested =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ first),
		first : EMFTVM!Instruction
	to lv : EMFTVM!LocalVariable (startInstruction =~ first),
		invokeAllCbs : EMFTVM!InvokeAllCbs (owningBlock =~ cb),
		cb : EMFTVM!CodeBlock (nested =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ first),
		first : EMFTVM!Instruction
}

rule RetargetInvokeAllCbsLocalVariableEnd extends LocalVariable {
	from lv : EMFTVM!LocalVariable (endInstruction =~ invokeAllCbs),
		invokeAllCbs : EMFTVM!InvokeAllCbs (owningBlock =~ cb),
		cb : EMFTVM!CodeBlock (nested =~| nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~| last),
		last : EMFTVM!Instruction
	to lv : EMFTVM!LocalVariable (endInstruction =~ last),
		invokeAllCbs : EMFTVM!InvokeAllCbs (owningBlock =~ cb),
		cb : EMFTVM!CodeBlock (nested =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock (code =~ last),
		last : EMFTVM!Instruction
}

abstract rule InvokeAllCbs {
	from cb : EMFTVM!CodeBlock (code =~ invokeAllCbs),
		invokeAllCbs : EMFTVM!InvokeAllCbs
	to cb : EMFTVM!CodeBlock (code =~ invokeAllCbs),
     invokeAllCbs : EMFTVM!InvokeAllCbs
}

rule InvokeAllCbs_inline_locals extends InvokeAllCbs {
	from cb : EMFTVM!CodeBlock (
			code =~ invokeAllCbs,
			nested =~ nestedCb),
		invokeAllCbs : EMFTVM!InvokeAllCbs,
		nestedCb : EMFTVM!CodeBlock (localVariables =~ lv),
		lv : EMFTVM!LocalVariable (slot =~ lv.slot)
	to cb : EMFTVM!CodeBlock (
		code =~ invokeAllCbs,
		nested =~ nestedCb,
		localVariables =~ lv),
       invokeAllCbs : EMFTVM!InvokeAllCbs,
       nestedCb : EMFTVM!CodeBlock,
	   lv : EMFTVM!LocalVariable
}

rule InvokeAllCbs_inline extends InvokeAllCbs {
	from cb : EMFTVM!CodeBlock (
			code =~ invokeAllCbs,
			nested =~ nestedCb),
		invokeAllCbs : EMFTVM!InvokeAllCbs,
		nestedCb : EMFTVM!CodeBlock
	not nestedCb : EMFTVM!CodeBlock (localVariables =~ lv),
		lv : EMFTVM!LocalVariable (slot =~ lv.slot)
	to cb : EMFTVM!CodeBlock (
		code =~ invokeAllCbs,
		code =~ nestedCb.code before invokeAllCbs,
		lineNumbers =~ nestedCb.lineNumbers,
		nested =~ nestedCb.nested before nestedCb),
     invokeAllCbs : EMFTVM!InvokeAllCbs
}

rule InvokeAllCbs_maxreset extends InvokeAllCbs {
	from cb : EMFTVM!CodeBlock (
			code =~ invokeAllCbs,
			maxStack =~ cb.maxStack,
			maxLocals =~ cb.maxLocals),
		invokeAllCbs : EMFTVM!InvokeAllCbs
	not cb : EMFTVM!CodeBlock (nested =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock
	to cb : EMFTVM!CodeBlock
}

abstract rule EmptyCodeBlock {
	from cb : EMFTVM!CodeBlock (applierFor =~ r),
		r : EMFTVM!Rule
	not cb : EMFTVM!CodeBlock (code =~ instr),
		instr : EMFTVM!Instruction
	to cb : EMFTVM!CodeBlock (applierFor =~ r),
		r : EMFTVM!Rule
}

rule EmptyCodeBlockWithLocals extends EmptyCodeBlock {
	from cb : EMFTVM!CodeBlock (localVariables =~ lv),
		lv : EMFTVM!LocalVariable
	to cb : EMFTVM!CodeBlock
}

rule EmptyCodeBlockWithLineNumbers extends EmptyCodeBlock {
	from cb : EMFTVM!CodeBlock (lineNumbers =~ ln),
		ln : EMFTVM!LineNumber
	to cb : EMFTVM!CodeBlock
}

rule EmptyCodeBlockWithoutAnything extends EmptyCodeBlock {
	from cb : EMFTVM!CodeBlock
}
