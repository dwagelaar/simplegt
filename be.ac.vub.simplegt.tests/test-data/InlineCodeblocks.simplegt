-- Inlines nested code blocks
-- $Id$
module InlineCodeblocks;

transform M : EMFTVM;

rule Invoke_cb {
	from cb : EMFTVM!CodeBlock (code =~ invoke_cb),
		invoke_cb : EMFTVM!Invoke_cb (codeBlock =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock
	to cb : EMFTVM!CodeBlock (
		code =~ nestedCb.code before invoke_cb,
		localVariables =~ nestedCb.localVariables,
		lineNumbers =~ nestedCb.lineNumbers,
		nested =~ nestedCb.nested)
}

abstract rule Invoke_all_cbs {
	from cb : EMFTVM!CodeBlock (code =~ invoke_all_cbs),
		invoke_all_cbs : EMFTVM!Invoke_all_cbs
	to cb : EMFTVM!CodeBlock (code =~ invoke_all_cbs),
     invoke_all_cbs : EMFTVM!Invoke_all_cbs
}

rule Invoke_all_cbs_nested extends Invoke_all_cbs {
	from cb : EMFTVM!CodeBlock (
			code =~ invoke_all_cbs,
			nested =~ nestedCb),
		invoke_all_cbs : EMFTVM!Invoke_all_cbs,
		nestedCb : EMFTVM!CodeBlock
	to cb : EMFTVM!CodeBlock (
		code =~ invoke_all_cbs,
		code =~ nestedCb.code before invoke_all_cbs,
		localVariables =~ nestedCb.localVariables,
		lineNumbers =~ nestedCb.lineNumbers,
		nested =~ nestedCb.nested),
     invoke_all_cbs : EMFTVM!Invoke_all_cbs
}

rule Invoke_all_cbs_no_nested extends Invoke_all_cbs {
	from cb : EMFTVM!CodeBlock (code =~ invoke_all_cbs),
		invoke_all_cbs : EMFTVM!Invoke_all_cbs
	not cb : EMFTVM!CodeBlock (nested =~ nestedCb),
		nestedCb : EMFTVM!CodeBlock
	to cb : EMFTVM!CodeBlock
}

rule EmptyLineNumber {
	from ln : EMFTVM!LineNumber
	not instr : EMFTVM!Instruction (lineNumber =~ ln)
}
