/**
 * (C) 2011, Dennis Wagelaar, Vrije Universiteit Brussel
 */
package be.ac.vub.simplegt.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import be.ac.vub.simplegt.util.SimplegtAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SimplegtItemProviderAdapterFactory extends SimplegtAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SimplegtItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.Type} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeItemProvider typeItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.Type}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeAdapter() {
		if (typeItemProvider == null) {
			typeItemProvider = new TypeItemProvider(this);
		}

		return typeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.Module} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleItemProvider moduleItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.Module}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleAdapter() {
		if (moduleItemProvider == null) {
			moduleItemProvider = new ModuleItemProvider(this);
		}

		return moduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.InPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InPatternItemProvider inPatternItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.InPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInPatternAdapter() {
		if (inPatternItemProvider == null) {
			inPatternItemProvider = new InPatternItemProvider(this);
		}

		return inPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.NacPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NacPatternItemProvider nacPatternItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.NacPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNacPatternAdapter() {
		if (nacPatternItemProvider == null) {
			nacPatternItemProvider = new NacPatternItemProvider(this);
		}

		return nacPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.OutPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutPatternItemProvider outPatternItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.OutPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutPatternAdapter() {
		if (outPatternItemProvider == null) {
			outPatternItemProvider = new OutPatternItemProvider(this);
		}

		return outPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.InputElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputElementItemProvider inputElementItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.InputElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputElementAdapter() {
		if (inputElementItemProvider == null) {
			inputElementItemProvider = new InputElementItemProvider(this);
		}

		return inputElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.OutputElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputElementItemProvider outputElementItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.OutputElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputElementAdapter() {
		if (outputElementItemProvider == null) {
			outputElementItemProvider = new OutputElementItemProvider(this);
		}

		return outputElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.InputBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputBindingItemProvider inputBindingItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.InputBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputBindingAdapter() {
		if (inputBindingItemProvider == null) {
			inputBindingItemProvider = new InputBindingItemProvider(this);
		}

		return inputBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.OutputBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputBindingItemProvider outputBindingItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.OutputBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputBindingAdapter() {
		if (outputBindingItemProvider == null) {
			outputBindingItemProvider = new OutputBindingItemProvider(this);
		}

		return outputBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.ElementExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementExpItemProvider elementExpItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.ElementExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementExpAdapter() {
		if (elementExpItemProvider == null) {
			elementExpItemProvider = new ElementExpItemProvider(this);
		}

		return elementExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.StringLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringLiteralExpItemProvider stringLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.StringLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringLiteralExpAdapter() {
		if (stringLiteralExpItemProvider == null) {
			stringLiteralExpItemProvider = new StringLiteralExpItemProvider(this);
		}

		return stringLiteralExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.IntegerLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerLiteralExpItemProvider integerLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.IntegerLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerLiteralExpAdapter() {
		if (integerLiteralExpItemProvider == null) {
			integerLiteralExpItemProvider = new IntegerLiteralExpItemProvider(this);
		}

		return integerLiteralExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.DoubleLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoubleLiteralExpItemProvider doubleLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.DoubleLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoubleLiteralExpAdapter() {
		if (doubleLiteralExpItemProvider == null) {
			doubleLiteralExpItemProvider = new DoubleLiteralExpItemProvider(this);
		}

		return doubleLiteralExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.BooleanLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanLiteralExpItemProvider booleanLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.BooleanLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanLiteralExpAdapter() {
		if (booleanLiteralExpItemProvider == null) {
			booleanLiteralExpItemProvider = new BooleanLiteralExpItemProvider(this);
		}

		return booleanLiteralExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.EnumLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumLiteralExpItemProvider enumLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.EnumLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumLiteralExpAdapter() {
		if (enumLiteralExpItemProvider == null) {
			enumLiteralExpItemProvider = new EnumLiteralExpItemProvider(this);
		}

		return enumLiteralExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.Metamodel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetamodelItemProvider metamodelItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.Metamodel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetamodelAdapter() {
		if (metamodelItemProvider == null) {
			metamodelItemProvider = new MetamodelItemProvider(this);
		}

		return metamodelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link be.ac.vub.simplegt.InstanceModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceModelItemProvider instanceModelItemProvider;

	/**
	 * This creates an adapter for a {@link be.ac.vub.simplegt.InstanceModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstanceModelAdapter() {
		if (instanceModelItemProvider == null) {
			instanceModelItemProvider = new InstanceModelItemProvider(this);
		}

		return instanceModelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (typeItemProvider != null) typeItemProvider.dispose();
		if (moduleItemProvider != null) moduleItemProvider.dispose();
		if (ruleItemProvider != null) ruleItemProvider.dispose();
		if (inPatternItemProvider != null) inPatternItemProvider.dispose();
		if (nacPatternItemProvider != null) nacPatternItemProvider.dispose();
		if (outPatternItemProvider != null) outPatternItemProvider.dispose();
		if (inputElementItemProvider != null) inputElementItemProvider.dispose();
		if (outputElementItemProvider != null) outputElementItemProvider.dispose();
		if (inputBindingItemProvider != null) inputBindingItemProvider.dispose();
		if (outputBindingItemProvider != null) outputBindingItemProvider.dispose();
		if (elementExpItemProvider != null) elementExpItemProvider.dispose();
		if (stringLiteralExpItemProvider != null) stringLiteralExpItemProvider.dispose();
		if (integerLiteralExpItemProvider != null) integerLiteralExpItemProvider.dispose();
		if (doubleLiteralExpItemProvider != null) doubleLiteralExpItemProvider.dispose();
		if (booleanLiteralExpItemProvider != null) booleanLiteralExpItemProvider.dispose();
		if (enumLiteralExpItemProvider != null) enumLiteralExpItemProvider.dispose();
		if (metamodelItemProvider != null) metamodelItemProvider.dispose();
		if (instanceModelItemProvider != null) instanceModelItemProvider.dispose();
	}

}
